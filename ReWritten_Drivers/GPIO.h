#ifndef GPIO_H_
#define GPIO_H_

#include <stdint.h>

#define GPIOA_BASE 0x40010800
#define GPIOB_BASE 0x40010c00
#define GPIOC_BASE 0x40011000

typedef struct GPIO_Struct
{
	uint32_t GPIO_CRL_OFFSET;
	uint32_t GPIO_CRH_OFFSET;
	uint32_t GPIO_IDR_OFFSET;   //0x08
	uint32_t GPIO_ODR_OFFSET;   //0x0c
	uint32_t GPIO_BSRR_OFFSET;   //0x10
	uint32_t GPIO_BRR_OFFSET;    //0x14
	uint32_t GPIO_LCKR_OFFSET;   //0x18
};

typedef enum
{
	GPIO_P0 = 0b0000000000000001, ///< GPIO_P0
	GPIO_P1 = 0b0000000000000010, ///< GPIO_P1
	GPIO_P2 = 0b0000000000000100, ///< GPIO_P2
	GPIO_P3 = 0b0000000000001000, ///< GPIO_P3
	GPIO_P4 = 0b0000000000010000, ///< GPIO_P4
	GPIO_P5 = 0b0000000000100000, ///< GPIO_P5
	GPIO_P6 = 0b0000000001000000, ///< GPIO_P6
	GPIO_P7 = 0b0000000010000000, ///< GPIO_P7
	GPIO_P8 = 0b0000000100000000, ///< GPIO_P8
	GPIO_P9 = 0b0000001000000000, ///< GPIO_P9
	GPIO_P10 = 0b0000010000000000,///< GPIO_P10
	GPIO_P11 = 0b0000100000000000,///< GPIO_P11
	GPIO_P12 = 0b0001000000000000,///< GPIO_P12
	GPIO_P13 = 0b0010000000000000,///< GPIO_P13
	GPIO_P14 = 0b0100000000000000,///< GPIO_P14
	GPIO_P15 = 0b1000000000000000,///< GPIO_P15
} GPIO_Pin;

void GPIO_TogglePin(GPIO_Struct *Port, GPIO_Pin pin);
void GPIO_Lock_Pin(GPIO_Struct *Port, GPIO_Pin pin, uint8_t Lock_Unlock);

#endif GPIO_H_
